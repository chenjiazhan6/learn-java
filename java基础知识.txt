java入门知识：
在面向对象的世界里，只有对象，万事万物都是对象
对象又是由类作为模板构建出来的
类就是对象的蓝图，可以把类想像成一个表格，而对象就是已经填好的表格
这些表格都具有一些相同的特征，但是不同的表格在我们眼中都是不同的，因为里面的内容各不
相同，而通过同一个类构建出来的对象也是不同的，因为在内存中的位置都是不同的，里面存储的
数据也是不同的。

对象中数据称为实例域，操纵数据的过程称为方法，对象中的数据域便是这个对象此时的状态，
每一个对象都有其特定的状态，而且对方法的响应有可能会改变其状态

作为对象，如果我的数据能够被别人随便更改，是不是很不爽呢？
此时就需要封装了。对数据进行封装，只需要在变量前面加一个private就可以，别的对象就不能随便访问，
想要修改访问我的数据，必须经过我的同意，即我要提供修改器方法和访问器方法.
封装还有一个优点，因为数据已经被封装起来了，想要访问它必须通过方法，
所以数据的存储形式可以任意装换，只要在相应的接口能够实现相应的功能即可。

数据域中数据的类型如果不是基本的数据类型的话，就是引用对象的类型在这里有一个需要注意的，
如果我的访问器方法返回的如果是引用类型的变量，必须返回该变量的clone值，
不然的话封装便被破坏了，可以通过我返回的这个引用变量来修改里面的内容，这样子就不行了呀

对象的私有变量一般是不能被其他对象所访问的，可是有例外，其他对象的方法能够使用你的私有变量。
在方法里面是可以访问其他对象的私有变量的。这个方法是在该对象的类里面定义的。
在类里面变量是可以任意访问的，不存在private的问题

说到方法，在类中有一个特殊的方法，就是构造方法，也称构造器。
构造器的名字必须与该类名字相同，没有返回类型，访问权限是public，
当创建对象时，构造器便会启动运行，与普通方法不同的是，
不能通过已经存在是对象来调用它，因为它本来就是用来创建对象的，如果可以的话，这也太奇怪了吧。


如果想要调用这个构造器的话，需要通过关键字new来创建对象，假设我们有一个类person，new person()
便成功创建出了这个对象，返回了一个引用变量。引用变量存着指向堆内存的地址，我们的对象就存在堆内存的
这个地方。


而构造器有有参构造器和无参构造器，能够通过有参构造器对数据域的数据赋予我们想赋予它们的值。
方法名下相同，只有参数不同，具有这种特征就叫做重载。而在编译过程中，编译器会通过与各个方法
给出的参数进行比较，确定相应的方法，这个过程就叫做重载解析。

我们的构造器名字都与类名相同，只是参数类型不同，所以如果具有多个构造器的话，自然也具有重载的
特征，在创建对象的过程也会经历重载解析的过程。

如果构造器想要调用同一个类中的另一个构造器，只需要在构造方法第一行调用即可，也只能在
第一行便调用，通过this(...),加入相应的参数。

构造器可以用来初始化对象的实例域，那类中还有其他组成可以用来初始化的吗？
答案是肯定的，可以通过初始化块来初始实例域，也可以在定义该变量的时候直接初始化。
使用代码块的话，这段初始化块的代码编译时会被加入到构造方法里面，按照顺序进行初始化。
先运行初始化块里面的语句，再运行构造器里面的语句。

如果在初始块里面已经初始化，然后又在构造器里面初始化，初始块的语句就失去作用了。
如果想要所有创建出来的对象的某一个数据域都具有相同的值，可以使用初始化块或者定义时便初始化。

除了实例域，还有静态域，静态域可以分成静态常量和静态变量，当然普通的变量也有常量和变量。
静态变量形式public static int nextID，这个静态变量是可以随便更改的，
静态常量形式public static final double PI,这个就是静态常量，一旦初始化便不能再更改。
这个不能再更改的意思，如果它是基本数据类型的话，里面的内容就不能再更改了，如果是引用类型的话，
指向的地址不会再改变，可是内存里面的内容是可以改变的。

静态域它不是属于某个对象的，它是属于类的，与具体的对象没有关系，即使不存在对象，
这个变量也依旧存在，在内存只存在一个地址存放着这个变量，
所有的对象都共享这个静态域。

初始化静态变量可以在定义时便初始化，也可以使用静态初始化块对静态变量进行初始化。
静态类常量只会被初始化一次。

既然有静态域，实例域，初始化块，构造器，static初始化块，那么他们的初始化顺序又是什么呢？
首向，如果我们有定义静态类变量和类初始化块的话，在编译的时候就会自动将所有的静态语句和static初始化块
收集起来，放到static初始化块中，并且只执行一次，因为类只加载一次。
而初始化块在执行之时，相当于放在构造器前面，依次执行。所以每一次创建一个对象的时候这个初始化块
都会被执行一次，用来定义所有对象所具有的属性。

所以对象创建过程中，首向是加载类，这个过程会把类变量进行初始化，static语句和static块只会被执行
一次，创建对象的时候，使用new person()创建对象的时候，会为它分配足够的内存，然后把person里面的
基本数据类型设置为默认值，而引用类型设置为null，然后java收集初始化块和实例变量的复制语句，在
构造器里面按照顺序执行，没有构造器会自动生成一个默认构造器；

放在构造器之外的语句比构造器的初始化语句先执行，这是毫无疑问的，那么问题来了，是赋值语句先执行呢？
还是初始化块先执行呢？
答案是赋值语句先执行，然后再执行初始化块。



